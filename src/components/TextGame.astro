<div class="min-h-screen bg-black">
  <div id="gameContainer" class="text-green-500 text-sm font-mono p-4">
    <p id="textOutput"></p>
    <input id="textInput" type="text" class="bg-black text-green-500 text-sm font-mono p-2 mt-4 w-full" autofocus>
  </div>
</div>

<style>
#gameContainer {
  max-width: 800px;
  margin: 0 auto;
  border: 2px solid #22dd22;
  border-radius: 10px;
  overflow: hidden;
}

#textInput {
  border: none;
  border-top: 1px solid #22dd22;
  outline: none;
}
</style>

<script is:inline>

class Game {
  constructor() {
    this.currentRoom = "entrance";
    this.backpack = [];
    this.isTyping = false;
    this.itemsConfig = {
      "mystery box": {
        use: (game) => {
          game.typeWriter("\nYou opened the mystery box and found a key inside.");
          game.addItemToBackpack("key");
          game.removeItemFromBackpack("mystery box");
        },
      },
      "book of riddles": {
        use: (game) => {
          if (game.currentRoom === "library") {
            const secretExit = game.rooms["library"].exits["east"];
            if (secretExit.locked) {
              secretExit.locked = false;
              game.typeWriter("\nYou read the riddle in the book and the secret room reveals itself.");
            } else {
              game.typeWriter("\nThe secret room is already open.");
            }
          } else {
            game.typeWriter("\nYou can't use the book of riddles here.");
          }
        },
      },
      // Add more items with their use functions here
    };
    this.rooms = {
      entrance: {
        description: "As you enter the tomb, you find yourself in a dimly lit room with stone walls and a dusty floor. The only light source is a flickering torch on the wall. There are two doors in front of you, one to your left and one to your right. On the wall to your right, there is a series of hieroglyphs that appear to be a clue.",
        items: ["torch"],
        itemDescriptions: {
          "torch": "The torch on the wall is flickering, but still lit. You could take it with you if you need a light source."
        },
        exits: {
          forward: {
            roomId: "crypt",
            locked: true,
            key: "combination",
            lockedDescription: "The left door is locked with a number lock. The hieroglyphs on the wall might contain a clue to the combination.",
            unlockedDescription: "An open door leads to a Crypt.",
          },
          hallway: {
            roomId: "hallway1",
            locked: false,
            lockedDescription: "",
            unlockedDescription: "The right door is pitch black, you cannot see past it.",
          },
        },
      },
      hallway1: {
        description: "You are in a narrow hallway. Behind you is the entrance, you look ahead and there is some writing on the wall.",
        items: [],
        itemDescriptions: {},
        exits: {
          entrance: {
            roomId: "entrance",
            locked: false,
          },
          cloakroom: {
            roomId: "cloakroom",
            locked: false,
          },
        },
      },
      cloakroom: {
        description: "You are in a small cloakroom. There is a hallway behind you.",
        items: ["bronze key"],
        itemDescriptions: {
          "bronze key": "You look down and see a bronze key on the floor."
        },
        exits: {
          hallway: {
            roomId: "hallway1",
            locked: false,
          },
        },
      },
      library: {
        description: "You are in the library, filled with old books and scrolls. Behind you is the entrance, and a mysterious bookshelf to the east.",
        items: ["book of riddles"],
        itemDescriptions: {
          "book of riddles": "An old book of riddles lies on the table."
        },
        exits: {
          entrance: {
            roomId: "entrance",
            locked: false,
          },
          east: {
            roomId: "secret_room",
            locked: true,
            key: "book of riddles",
          },
        },
      },
      secret_room: {
        description: "You found the secret room! It's full of treasures. Behind you is the library.",
        items: ["silver key"],
        itemDescriptions: {
          "silver key": "You see a silver key on a pedestal."
        },
        exits: {
          library: {
            roomId: "library",
            locked: false,
          },
        },
      },
    };

    // Initialize the room descriptions with the appropriate locked/unlocked exit descriptions
    for (const room of Object.values(this.rooms)) {
      for (const exit of Object.values(room.exits)) {
        room.description += exit.locked ? ` ${exit.lockedDescription}` : ` ${exit.unlockedDescription}`;
      }
    }
  }

  useItem(item) {
    if (this.backpack.includes(item) && this.itemsConfig[item]) {
      this.itemsConfig[item].use(this);
      this.removeItemFromBackpack(item);
    } else {
      this.typeWriter("\nYou can't use that item here.");
    }
  }

  addItemToBackpack(item) {
    if (!this.backpack.includes(item)) {
      this.backpack.push(item);
    }
  }

  removeItemFromBackpack(item) {
    const index = this.backpack.indexOf(item);
    if (index > -1) {
      this.backpack.splice(index, 1);
    }
  }

  removeItemFromBackpack(item) {
    const index = this.backpack.indexOf(item);
    if (index > -1) {
      this.backpack.splice(index, 1);
    }
    return this.backpack;
  }

  handleUserInput(input) {
    if (this.isTyping) {
      return;
    }

    const [command, ...args] = input.trim().toLowerCase().split(" ");
    let item = args.join(" ");

    switch (command) {
      case "look":
        // Display room description
        let description = `\n${this.rooms[this.currentRoom].description}`;

        // Display item descriptions if the item is in the room
        for (const item of this.rooms[this.currentRoom].items) {
          if (this.rooms[this.currentRoom].itemDescriptions[item]) {
            description += ` ${this.rooms[this.currentRoom].itemDescriptions[item]}`;
          }
        }
        this.typeWriter(description);
        break;
      case "help":
        const helpText = "\nCommands you can use:\n- look\n- go [location]\n- get [item]\n- use [item]\n- backpack";
        this.typeWriter(helpText);
        break;
      case "backpack":
        if (this.backpack.length > 0) {
          const backpackItems = this.backpack.join(", ");
          this.typeWriter(`\nYour backpack contains: ${backpackItems}`);
        } else {
          this.typeWriter("\nYour backpack is empty.");
        }
        break;
      case "use":
        this.useItem(item);
        break;
      case "get":
        if (this.rooms[this.currentRoom].items.includes(item)) {
          this.addItemToBackpack(item);
          this.removeItemFromRoom(item);
          this.typeWriter(`\nYou picked up the ${item}.`);
        } else {
          this.typeWriter("\nThat item isn't here.");
        }
        break;
      case "go":
        const exit = this.rooms[this.currentRoom].exits[item];
        if (exit) {
          if (exit.locked) {
            this.typeWriter("\nThe door is locked.");
          } else {
            this.currentRoom = exit.roomId;
            
            // Display room description
            let description = `\n${this.rooms[this.currentRoom].description}`;

            // Display item descriptions if the item is in the room
            for (const item of this.rooms[this.currentRoom].items) {
              if (this.rooms[this.currentRoom].itemDescriptions[item]) {
                description += ` ${this.rooms[this.currentRoom].itemDescriptions[item]}`;
              }
            }
            this.typeWriter(description);
          }
        } else {
          this.typeWriter("\nYou can't go that way.");
        }
        break;
      default:
        this.typeWriter("\nThat's not a command! Type 'help' to see a list of commands.");
      }
    }

    typeWriter(text, i = 0) {
      if (this.isTyping) {
        return;
      }
      this.isTyping = true;
      const typeWrite_Hidden = (text, i = 0) => {
        if (i < text.length) {
          if (text.charAt(i) === '<') {
            const tagEndIndex = text.indexOf('>', i);
            textOutput.innerHTML += text.slice(i, tagEndIndex + 1);
            setTimeout(() => typeWrite_Hidden(text, tagEndIndex + 1), 5);
          } else {
            const char = text.charAt(i);
            textOutput.innerHTML += char === '\n' ? '<br>' : char;
            if (text.charAt(i) === '.') {
              setTimeout(() => typeWrite_Hidden(text, i + 1), 500); // Set typing speed (5ms)
            } else {
              setTimeout(() => typeWrite_Hidden(text, i + 1), 20); // Set typing speed (5ms)
            }
          }
        } else {
          this.isTyping = false;
        }
      };
      typeWrite_Hidden(text);
    }
}

const game = new Game();

const textOutput = document.getElementById("textOutput");
const textInput = document.getElementById("textInput");

function handleKeyPress(event) {
  if (event.key === "Enter") {
    event.preventDefault();
    game.handleUserInput(textInput.value);
    textInput.value = "";
  }
}

textInput.addEventListener("keydown", handleKeyPress);

function startGame() {
  const tutorialText = `
  You and your group of friends are part of a secret society investigating the mysterious disappearance of a famous archaeologist who went missing while exploring an ancient tomb. Your investigation has led you to a hidden underground chamber where you must solve a series of puzzles and unlock the secrets of the tomb to uncover the truth behind the archaeologist's disappearance.

  To control your character, type a command and press Enter. Here are the commands you can use:
  - look
  - go [location]
  - get [item]
  - use [item]
  - backpack
  
  To start the game, type 'look' and press Enter.`;
  game.typeWriter(tutorialText);
}

startGame();

</script>